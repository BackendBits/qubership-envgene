# roles/generate_appregdefs/tasks/render_single_regdef.yaml

- block:
    # 1) Ensure tmp_render_dir + timestamp (fact / shell fallback)
    - name: Ensure tmp_render_dir and render_timestamp are set
      set_fact:
        tmp_render_dir: "{{ tmp_render_dir | default('/tmp') }}"
        render_timestamp: >-
          {{ render_timestamp | default(
              (ansible_date_time.epoch
                 if (ansible_date_time is defined and ansible_date_time.epoch is defined)
                 else lookup('pipe','date +%s')
              )
            )
          }}

    # 2) Prepare overrides for Jinja
    - name: Prepare regdefs dict for Jinja context
      set_fact:
        regdefs:
          overrides: "{{ regdefs_overrides }}"

    # 3) Compute a stable base name (strip trailing .j2)
    - name: Extract template_name (basename without .j2)
      set_fact:
        template_name: "{{ item.path | basename | regex_replace('\\.j2$','') }}"

    # 4) Render into a timestamped temp file
    - name: Render RegDef template using Jinja
      template:
        src:  "{{ item.path }}"
        dest: "{{ tmp_render_dir }}/{{ template_name }}.{{ render_timestamp }}.rendered.regdef.yml"
      vars:
        current_env: "{{ current_env }}"
        regdefs:     "{{ regdefs }}"

    # 5) Read & decode the rendered output
    - name: Read rendered RegDef into string
      slurp:
        src: "{{ tmp_render_dir }}/{{ template_name }}.{{ render_timestamp }}.rendered.regdef.yml"
      register: regdef_rendered_slurp

    - name: Decode rendered RegDef content
      set_fact:
        regdef_raw_rendered: "{{ regdef_rendered_slurp.content | b64decode }}"

    # 6) Parse for the name field and detect version
    - name: Parse rendered RegDef YAML into dict
      set_fact:
        regdef_content: "{{ regdef_raw_rendered | from_yaml }}"

    # 7) Version detection (minimal change)
    - name: Detect RegDef version
      set_fact:
        regdef_version: "{{ regdef_content.version | default('1.0') }}"

    # 8) Validate based on version
    - name: Validate V1 RegDef (existing logic)
      assert:
        that:
          - regdef_content.name is defined
          - regdef_content.name | length > 0
          - regdef_content.credentialsId is defined
        fail_msg: "RegDef V1 from {{ item.path }} missing required fields (name, credentialsId)"
      when: regdef_version == "1.0"

    - name: Validate V2 RegDef (new logic)
      assert:
        that:
          - regdef_content.name is defined
          - regdef_content.name | length > 0
          - regdef_content.version == "2.0"
          - regdef_content.authConfig is defined
        fail_msg: "RegDef V2 from {{ item.path }} missing required fields"
      when: regdef_version == "2.0"

    # 9) Write out the final file
    - name: Save final rendered RegDef
      copy:
        content: "{{ regdef_raw_rendered }}"
        dest:    "{{ current_env_dir }}/RegDefs/{{ regdef_content.name }}.yml"
        mode:    '0644'

    # 10) Clean up temporary file
    - name: Clean up temporary rendered file
      file:
        path: "{{ tmp_render_dir }}/{{ template_name }}.{{ render_timestamp }}.rendered.regdef.yml"
        state: absent
